@page "/timer"

@inject RecurringOperationsManager Recurop

<PageTitle>Score keeper</PageTitle>

<div style="margin-top:55px; text-align:center">
    <div>
        <p style="visibility: @(_timerVisible ? "visible" : "hidden"); font-size: 75px;">@_displayTime</p>
    </div>
    <div style="padding-top:20px">
        <button class="btn btn-sm btn-primary" disabled=@(_timerOperation.CanBeStarted ? false : true) @onclick="StartTimer">Start</button>
        <button class="btn btn-sm btn-primary" disabled=@(_timerOperation.IsRecurring ? false : true) @onclick="PauseTimer">Pause</button>
        <button class="btn btn-sm btn-primary" disabled=@(_timerOperation.IsPaused ? false : true) @onclick="ResumeTimer">Resume</button>
        <button class="btn btn-sm btn-danger" disabled=@(_timerOperation.IsRecurring ? false : true) @onclick="StopTimer">Stop</button>

    </div>

</div>

@code {
    RecurringOperation _timerOperation;
    RecurringOperation _blinkerOperation;
    TimeSpan _displayTime = default;
    int _elapsedSeconds;
    bool _timerVisible = true;

    protected override void OnInitialized()
    {
        _timerOperation = new("timer");
        _timerOperation.Operation = IncrementTimer;
        _timerOperation.StatusChanged += TimerOperationStatusChanged;
        _timerOperation.OperationFaulted += LogError;

        _blinkerOperation = new("blinker");
        _blinkerOperation.Operation = BlinkTimer;
        _blinkerOperation.StatusChanged += BlinkerOperationStatusChanged;


    }

    void StartTimer()
    {
        Recurop.StartRecurring(_timerOperation, TimeSpan.FromSeconds(1));
    }

    void PauseTimer()
    {
        Recurop.PauseRecurring(_timerOperation);
        Recurop.StartRecurring(_blinkerOperation, TimeSpan.FromSeconds(0.5));
    }

    void ResumeTimer()
    {
        Recurop.ResumeRecurring(_timerOperation);
        Recurop.CancelRecurring(_blinkerOperation);
    }

    void StopTimer()
    {
        Recurop.CancelRecurring(_timerOperation);
    }

    void IncrementTimer()
    {
        _elapsedSeconds++;
        _displayTime = TimeSpan.FromSeconds(_elapsedSeconds);
        StateHasChanged();
    }

    void BlinkTimer()
    {
        _timerVisible = !_timerVisible;
        StateHasChanged();
    }



    void BlinkerOperationStatusChanged()
    {
        switch (_blinkerOperation.Status)
        {
            case RecurringOperationStatus.Idle:
                break;
            case RecurringOperationStatus.Paused:
                break;
            case RecurringOperationStatus.Executing:
                break;
            case RecurringOperationStatus.Cancelled:
                _timerVisible = true;
                break;
            default:
                break;
        }
    }

    void TimerOperationStatusChanged()
    {
        switch (_timerOperation.Status)
        {
            case RecurringOperationStatus.Idle:
                break;
            case RecurringOperationStatus.Paused:
                break;
            case RecurringOperationStatus.Executing:
                break;
            case RecurringOperationStatus.Cancelled:
                _displayTime = TimeSpan.Zero;
                _elapsedSeconds = 0;
                break;
            default:
                break;
        }
    }

    void LogError(Exception ex)
    {
        Console.WriteLine(ex.Message);
    }

    public void Dispose()
    {
        Recurop.CancelRecurring(_timerOperation);
        Recurop.CancelRecurring(_blinkerOperation);
    }
}